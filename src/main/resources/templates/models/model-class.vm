/*
* Copyright (c) $year SAP SE or an SAP affiliate company. All rights reserved.
* ----------------------------------------------------------------
* --- WARNING: THIS FILE IS GENERATED BY EASY GRADLE PLUGIN AND WILL BE
* --- OVERWRITTEN IF REGENERATED AGAIN USING easy-class-gen GRADLE TASK!
* --- Generated at $currentDate
* ----------------------------------------------------------------
*/

package $package

import ${itemType.superTypeModelClass}
#foreach($attribute in ${itemType.attributes})
#if(!$excludedImports.contains($attribute.typeClass))
import ${attribute.typeClass}
#end
#end
import de.hybris.bootstrap.annotations.Accessor
import de.hybris.platform.servicelayer.model.ItemModelContext

#set($lastDotIndex = $itemType.superTypeModelClass.lastIndexOf('.'))
#set($superClassName = $itemType.superTypeModelClass.substring($lastDotIndex+1))
class ${itemType.modelClassName} extends $superClassName {

    static final String _TYPECODE = "$itemType.code"
#foreach($attribute in ${itemType.attributes})

    static final String $attribute.qualifier.toUpperCase() = "$attribute.qualifier"
#end

    ${itemType.modelClassName}() {
        super()
    }

    ${itemType.modelClassName}(final ItemModelContext ctx) {
        super(ctx)
    }

#foreach($attribute in ${itemType.attributes})
    #set($lastDotIndex = $attribute.typeClass.lastIndexOf('.'))
    #set($attributeClass = $attribute.typeClass.substring($lastDotIndex+1))
    #set($attributeQualifier = $attribute.qualifier)
    #set($firstChar = $attributeQualifier.substring(0, 1).toUpperCase())
    #set($capitalizedQualifier = $firstChar + $attributeQualifier.substring(1))
    #if($attribute.type.startsWith("localized"))
    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.GETTER)
    $attributeClass get$capitalizedQualifier() {
        return get$capitalizedQualifier(null)
    }

    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.GETTER)
    $attributeClass get$capitalizedQualifier(final Locale loc) {
        return getPersistenceContext().getLocalizedValue($attributeQualifier.toUpperCase(), loc)
    }
    #else
    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.GETTER)
    $attributeClass get$capitalizedQualifier() {
        return getPersistenceContext().getPropertyValue($attributeQualifier.toUpperCase())
    }
    #end

    #if($attribute.type.startsWith("localized"))
    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.GETTER)
    $attributeClass set$capitalizedQualifier(final $attributeClass value) {
        set$capitalizedQualifier(value, null)
    }

    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.GETTER)
    $attributeClass set$capitalizedQualifier(final $attributeClass value, final Locale loc) {
        getPersistenceContext().setLocalizedValue($attributeQualifier.toUpperCase(), loc, value)
    }
    #else
    @Accessor(qualifier = $attributeQualifier.toUpperCase(), type = Accessor.Type.SETTER)
    void set$capitalizedQualifier(final $attributeClass value) {
        getPersistenceContext().setPropertyValue($attributeQualifier.toUpperCase(), value)
    }
    #end

#end
}
