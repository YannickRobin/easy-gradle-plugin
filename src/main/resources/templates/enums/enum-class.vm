/*
* Copyright (c) $year SAP SE or an SAP affiliate company. All rights reserved.
* ----------------------------------------------------------------
* --- WARNING: THIS FILE IS GENERATED BY EASY GRADLE PLUGIN AND WILL BE
* --- OVERWRITTEN IF REGENERATED AGAIN USING easy-class-gen GRADLE TASK!
* --- Generated at $currentDate
* ----------------------------------------------------------------
*/

package $package

import de.hybris.platform.core.HybrisEnumValue
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentMap

class ${enumType.code} implements HybrisEnumValue {
    static final String _TYPECODE = "${enumType.code}"
    static final String SIMPLE_CLASSNAME = "${enumType.code}"
    static final ConcurrentMap<String, HybrisEnumValue> cache = new ConcurrentHashMap>String, HybrisEnumValue>()

#foreach($enumValue in ${enumType.values})
    static final ${enumType.code} ${enumValue.code.toUpperCase()} = valueOf("$enumValue.code")
#end

    private ${enumType.code}(final String code) {
        this.code = code.intern()
        this.codeLowerCase = this.code.toLowerCase().intern()
    }

    @Override
    String getType() {
        return SIMPLE_CLASSNAME
    }

    @Override
    String getCode() {
        return this.code
    }

    static ${enumType.code} valueOf(final String code) {
        final String key = code.toLowerCase();
        ${enumType.code} result = cache.get(key);
        if (result == null) {
            ${enumType.code} newValue = new ${enumType.code}(code)
            ${enumType.code} previous = cache.putIfAbsent(key, newValue)
            result = previous != null ? previous : newValue
        }
        return result;
    }

    @Override
    boolean equals(final Object obj) {
        try {
            final HybrisEnumValue enum2 = (HybrisEnumValue) obj
            return this.is(enum2) || (enum2 != null && !this.getClass().isEnum() && !enum2.getClass().isEnum() && this.getType().equalsIgnoreCase(enum2.getType()) && this.getCode().equalsIgnoreCase(enum2.getCode()))
        } catch (final ClassCastException e) {
            return false
        }
    }

    @Override
    int hashCode() {
        return this.codeLowerCase.hashCode()
    }

    @Override
    String toString() {
        return this.code.toString()
    }
}

